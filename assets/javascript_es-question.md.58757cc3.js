import{_ as s,c as a,o as l,N as n}from"./chunks/framework.6abb8a26.js";const A=JSON.parse('{"title":"ES6 问题汇总","description":"","frontmatter":{"title":"ES6 问题汇总","lang":"zh-CN"},"headers":[],"relativePath":"javascript/es-question.md"}'),o={name:"javascript/es-question.md"},e=n(`<h1 id="es6-问题汇总" tabindex="-1">ES6 问题汇总 <a class="header-anchor" href="#es6-问题汇总" aria-label="Permalink to &quot;ES6 问题汇总&quot;">​</a></h1><blockquote><p><a href="https://github.com/pwstrick/daily/blob/master/interview/es6.md" target="_blank" rel="noreferrer">https://github.com/pwstrick/daily/blob/master/interview/es6.md</a></p></blockquote><h2 id="_1-let-与-const-两个关键字与-var-的不同" tabindex="-1">1. let 与 const 两个关键字与 var 的不同 <a class="header-anchor" href="#_1-let-与-const-两个关键字与-var-的不同" aria-label="Permalink to &quot;1. let 与 const 两个关键字与 var 的不同&quot;">​</a></h2><ol><li>let 和 const 可以定义在块级作用域，var不行</li><li>都有变量提升，但是 var 可以提前访问（undefined） , let 与 const 会暂时性死区，报错</li><li>let 和 const 不允许重复声明，var 可以</li><li>顶级作用域声明的变量， var 会挂载到 window, let 与 const 不会</li></ol><h2 id="_2-请说明一下const的特点" tabindex="-1">2. 请说明一下const的特点 <a class="header-anchor" href="#_2-请说明一下const的特点" aria-label="Permalink to &quot;2. 请说明一下const的特点&quot;">​</a></h2><ol><li>声明的值，基本类型不能更改，引用类型不允许改引用，可以改属性</li><li>块级作用域</li></ol><h2 id="_3-扩展运算符用途" tabindex="-1">3. 扩展运算符用途 <a class="header-anchor" href="#_3-扩展运算符用途" aria-label="Permalink to &quot;3. 扩展运算符用途&quot;">​</a></h2><ol><li>获取函数的参数，给函数传参</li><li>浅拷贝</li><li>合并对象，合并数组</li><li>用于解构赋值</li></ol><h2 id="_4-什么是解构" tabindex="-1">4. 什么是解构 <a class="header-anchor" href="#_4-什么是解构" aria-label="Permalink to &quot;4. 什么是解构&quot;">​</a></h2><p>从数组或者对象中获取属性值，并赋值给变量</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">b</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">] </span><span style="color:#676E95;font-style:italic;">// a 1, b 2</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">b</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">a</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;">b</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// a 1, b 2</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">a</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> a1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;">b</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> b2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">c</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">c3 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">a</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;">b</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// a1 1, a2 2 ,c3 4</span></span>
<span class="line"></span></code></pre></div><h2 id="_5-如果忽略声明关键字-那么在运行对象解构的时候-为何要用圆括号包裹赋值表达式-如下所示" tabindex="-1">5. 如果忽略声明关键字，那么在运行对象解构的时候，为何要用圆括号包裹赋值表达式（如下所示）？ <a class="header-anchor" href="#_5-如果忽略声明关键字-那么在运行对象解构的时候-为何要用圆括号包裹赋值表达式-如下所示" aria-label="Permalink to &quot;5. 如果忽略声明关键字，那么在运行对象解构的时候，为何要用圆括号包裹赋值表达式（如下所示）？&quot;">​</a></h2><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">({ a, b } = { a: 3, b: 4 });</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>使用括号可以对表达式求值，上述的语句会得到 <code>{a:3,b:4}</code></p><h2 id="_6-利用数组解构交换变量" tabindex="-1">6. 利用数组解构交换变量 <a class="header-anchor" href="#_6-利用数组解构交换变量" aria-label="Permalink to &quot;6. 利用数组解构交换变量&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span></span>
<span class="line"><span style="color:#A6ACCD;">[a</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">b] </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [b</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> a]</span></span>
<span class="line"></span></code></pre></div><h2 id="_7-解构实践题" tabindex="-1">7. 解构实践题 <a class="header-anchor" href="#_7-解构实践题" aria-label="Permalink to &quot;7. 解构实践题&quot;">​</a></h2><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">[,,z] = [1,2,3] // z = 3</span></span>
<span class="line"><span style="color:#A6ACCD;">[x,...y] = [1,2,3] //x = 1, y = [2,3] ， 利用扩展符解构得到数组</span></span>
<span class="line"><span style="color:#A6ACCD;">{a:e,a:f}= {b: 4,a:6} // e = 6, f = 6 ， 允许对同个值解构重命名</span></span>
<span class="line"><span style="color:#A6ACCD;">{a,b=2} = {a:1,b:null} // b=nul ,默认值在值为undefined时 才起作用</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h2 id="_8-模板字面量" tabindex="-1">8.模板字面量 <a class="header-anchor" href="#_8-模板字面量" aria-label="Permalink to &quot;8.模板字面量&quot;">​</a></h2><p>定义：es6 引入的定义字符串的语法，可以在内部使用变量，可以直接声明换行的字符串，允许嵌套</p><h2 id="_9-es6-是否扩展了对象字面量中的属性名" tabindex="-1">9. ES6 是否扩展了对象字面量中的属性名 <a class="header-anchor" href="#_9-es6-是否扩展了对象字面量中的属性名" aria-label="Permalink to &quot;9. ES6 是否扩展了对象字面量中的属性名&quot;">​</a></h2><p>WIP</p>`,22),p=[e];function t(c,r,i,y,C,D){return l(),a("div",null,p)}const d=s(o,[["render",t]]);export{A as __pageData,d as default};

import{_ as n,c as l,o,N as a,x as s}from"./chunks/framework.6abb8a26.js";const b=JSON.parse('{"title":"ES6 问题汇总","description":"","frontmatter":{"title":"ES6 问题汇总","lang":"zh-CN"},"headers":[],"relativePath":"javascript/es-question.md"}'),p={name:"javascript/es-question.md"},e=a(`<h1 id="es6-问题汇总" tabindex="-1">ES6 问题汇总 <a class="header-anchor" href="#es6-问题汇总" aria-label="Permalink to &quot;ES6 问题汇总&quot;">​</a></h1><blockquote><p><a href="https://github.com/pwstrick/daily/blob/master/interview/es6.md" target="_blank" rel="noreferrer">https://github.com/pwstrick/daily/blob/master/interview/es6.md</a></p></blockquote><h2 id="_1-let-与-const-两个关键字与-var-的不同" tabindex="-1">1. let 与 const 两个关键字与 var 的不同 <a class="header-anchor" href="#_1-let-与-const-两个关键字与-var-的不同" aria-label="Permalink to &quot;1. let 与 const 两个关键字与 var 的不同&quot;">​</a></h2><ol><li>let 和 const 可以定义在块级作用域，var不行</li><li>都有变量提升，但是 var 可以提前访问（undefined） , let 与 const 会暂时性死区，报错</li><li>let 和 const 不允许重复声明，var 可以</li><li>顶级作用域声明的变量， var 会挂载到 window, let 与 const 不会</li></ol><h2 id="_2-请说明一下const的特点" tabindex="-1">2. 请说明一下const的特点 <a class="header-anchor" href="#_2-请说明一下const的特点" aria-label="Permalink to &quot;2. 请说明一下const的特点&quot;">​</a></h2><ol><li>声明的值，基本类型不能更改，引用类型不允许改引用，可以改属性</li><li>块级作用域</li></ol><h2 id="_3-扩展运算符用途" tabindex="-1">3. 扩展运算符用途 <a class="header-anchor" href="#_3-扩展运算符用途" aria-label="Permalink to &quot;3. 扩展运算符用途&quot;">​</a></h2><ol><li>获取函数的参数，给函数传参</li><li>浅拷贝</li><li>合并对象，合并数组</li><li>用于解构赋值</li></ol><h2 id="_4-什么是解构" tabindex="-1">4. 什么是解构 <a class="header-anchor" href="#_4-什么是解构" aria-label="Permalink to &quot;4. 什么是解构&quot;">​</a></h2><p>从数组或者对象中获取属性值，并赋值给变量</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">b</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">] </span><span style="color:#676E95;font-style:italic;">// a 1, b 2</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">b</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">a</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;">b</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// a 1, b 2</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">a</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> a1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;">b</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> b2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">c</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">c3 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">a</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;">b</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// a1 1, a2 2 ,c3 4</span></span>
<span class="line"></span></code></pre></div><h2 id="_5-如果忽略声明关键字-那么在运行对象解构的时候-为何要用圆括号包裹赋值表达式-如下所示" tabindex="-1">5. 如果忽略声明关键字，那么在运行对象解构的时候，为何要用圆括号包裹赋值表达式（如下所示）？ <a class="header-anchor" href="#_5-如果忽略声明关键字-那么在运行对象解构的时候-为何要用圆括号包裹赋值表达式-如下所示" aria-label="Permalink to &quot;5. 如果忽略声明关键字，那么在运行对象解构的时候，为何要用圆括号包裹赋值表达式（如下所示）？&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> a</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> b </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">a</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">b</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>使用括号可以对表达式求值，上述的语句会得到 <code>{a:3,b:4}</code>, 不加括号的话 会产生语法错误，无法直接对 <code>{}</code>赋值</p><h2 id="_6-利用数组解构交换变量" tabindex="-1">6. 利用数组解构交换变量 <a class="header-anchor" href="#_6-利用数组解构交换变量" aria-label="Permalink to &quot;6. 利用数组解构交换变量&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span></span>
<span class="line"><span style="color:#A6ACCD;">[a</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">b] </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [b</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> a]</span></span>
<span class="line"></span></code></pre></div><h2 id="_7-解构实践题" tabindex="-1">7. 解构实践题 <a class="header-anchor" href="#_7-解构实践题" aria-label="Permalink to &quot;7. 解构实践题&quot;">​</a></h2><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">[,,z] = [1,2,3] // z = 3</span></span>
<span class="line"><span style="color:#A6ACCD;">[x,...y] = [1,2,3] //x = 1, y = [2,3] ， 利用扩展符解构得到数组</span></span>
<span class="line"><span style="color:#A6ACCD;">{a:e,a:f}= {b: 4,a:6} // e = 6, f = 6 ， 允许对同个值解构重命名</span></span>
<span class="line"><span style="color:#A6ACCD;">{a,b=2} = {a:1,b:null} // b=nul ,默认值在值为undefined时 才起作用</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h2 id="_8-模板字面量" tabindex="-1">8.模板字面量 <a class="header-anchor" href="#_8-模板字面量" aria-label="Permalink to &quot;8.模板字面量&quot;">​</a></h2><blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Template_literals" target="_blank" rel="noreferrer">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Template_literals</a></p></blockquote><p>定义：es6 引入的定义字符串的语法，可以在内部使用变量，可以直接声明换行的字符串，允许嵌套，模板字面量也可以调用函数</p><p>限制： es2016 以及之前版本，</p>`,22),t=s("ul",null,[s("li",null,'Unicode 字符以"\\u"开头，例如\\u00A9'),s("li",{"2F804":""},'Unicode 码位用"\\u{}"表示，例如\\u'),s("li",null,'十六进制以"\\x"开头，例如\\xA9'),s("li",null,'八进制以""和数字开头，例如\\251')],-1),c=a(`<p>以上包含转义字符的会报错， es2018 后，带标签的模板字面量（函数调用）会进行兼容，转化为 undefined, 普通模板字面量对于某些转义字符还是会报错</p><h2 id="_9-es6-是否扩展了对象字面量中的属性名" tabindex="-1">9. ES6 是否扩展了对象字面量中的属性名 <a class="header-anchor" href="#_9-es6-是否扩展了对象字面量中的属性名" aria-label="Permalink to &quot;9. ES6 是否扩展了对象字面量中的属性名&quot;">​</a></h2><p>es6 中对象字面量的属性名可以用 变量和表达式， 利用 <code>[]</code> 进行包裹，内部的值会转化为字符串</p><h2 id="_10-symbol-的理解" tabindex="-1">10. Symbol 的理解 <a class="header-anchor" href="#_10-symbol-的理解" aria-label="Permalink to &quot;10. Symbol 的理解&quot;">​</a></h2><p>Symbol 是ES 新增的基础数据类型，具有唯一性，不可通过 new 调用，只能函数直接调用生成</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Symbol</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Symbol</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">b</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>Symbol 属于内建对象，可以直接调用自身的方法。</p><p>对象内部实现 <code>Symbol.iterator</code>方法，可以进行迭代器遍历<code>for ... of</code></p><p>可以利用Symbol 创建私有属性</p><h2 id="_11-如何理解内置符号" tabindex="-1">11. 如何理解内置符号 <a class="header-anchor" href="#_11-如何理解内置符号" aria-label="Permalink to &quot;11. 如何理解内置符号&quot;">​</a></h2><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">算术符号：+、-、*、/、%、++、--</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">比较符号：==、!=、===、!==、&lt;、&gt;、&lt;=、&gt;=</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">逻辑符号：&amp;&amp;、||、!</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">位运算符号：&amp;、|、^、~、&lt;&lt;、&gt;&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">赋值符号：=、+=、-=、*=、/=、%=、&amp;=、|=、^=、&lt;&lt;=、&gt;&gt;=</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">条件运算符：?:</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">函数调用符号：()</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">对象属性符号：.</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">数组索引符号：[]</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">扩展运算符：...</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">类型运算符：typeof、instanceof</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">其他符号：,、;、:、\\、/、&#39;、&quot;、\`、#、$、@、!、?、{}、()、[]</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h2 id="_12-length" tabindex="-1">12. [...[...&quot;...&quot;]].length <a class="header-anchor" href="#_12-length" aria-label="Permalink to &quot;12. [...[...&quot;...&quot;]].length&quot;">​</a></h2><p>3, 首先内部使用扩展运算符将字符串转化为长度为3的数组，然后再进行扩展，最后长度为3</p><h2 id="_13-模块化" tabindex="-1">13. 模块化 <a class="header-anchor" href="#_13-模块化" aria-label="Permalink to &quot;13. 模块化&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">b</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> a  </span><span style="color:#676E95;font-style:italic;">// 默认导出变量</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">b</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 默认导出函数</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">b</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// 具名导入</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> b </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// 默认导入</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 具名导入默认 </span></span>
<span class="line"></span></code></pre></div><p>ES Module 的模块化，导入的是变量的引用，</p><p>限制：</p><ol><li>兼容问题</li><li>静态加载，模块导入只能放在文件头部</li><li>命名冲突</li></ol>`,18),r=[e,t,c];function i(y,C,D,A,F,d){return o(),l("div",null,r)}const u=n(p,[["render",i]]);export{b as __pageData,u as default};
